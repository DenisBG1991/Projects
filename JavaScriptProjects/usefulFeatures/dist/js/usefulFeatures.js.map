{"version":3,"sources":["../../js/usefulFeatures.js"],"names":["usefulFunctions","inherit","p","TypeError","Object","create","t","f","prototype","extend","o","prop","merge","hasOwnProperty","restrict","subtract","union","intersection","keys","result","push","defineProperty","writable","enumerate","configurable","value","names","getOwnPropertyNames","i","length","desc","getOwnPropertyDescriptor","trace","m","alert","original","console","log","Date","arguments","apply","useTrace","x","a","name"],"mappings":"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","file":"usefulFeatures.js","sourcesContent":["export function usefulFunctions() {\r\n    /**\r\n     * inherit() возвращает вновь созданный объект, наследующий свойства\r\n     * объекта-прототипа p. Использует функцию Object.create() из ECMAScript 5,\r\n     * если она определена, иначе используется более старый прием.\r\n     */\r\n    function inherit(p) {\r\n        if (p == null) throw TypeError();\r\n        if (Object.create) return Object.create(p);\r\n        var t = typeof p;\r\n        if (t !== \"object\" && t !== \"function\") throw TypeError();\r\n        function f() {\r\n        }\r\n        f.prototype = p;\r\n        return new f();\r\n    }\r\n\r\n    /**\r\n     * Копирует перечислимые свойства из объекта p в объект o и возвращает o.\r\n     * Если o и p имеют свойства с одинаковыми именами, значение свойства\r\n     * в объекте o затирается значением свойства из объекта p.\r\n     * Эта функция не учитывает наличие методов доступа и не копирует атрибуты.\r\n     */\r\n    function extend(o, p) {\r\n        for (var prop in p) {\r\n            o[prop] = p[prop];\r\n        }\r\n        return o;\r\n    }\r\n\r\n    /**\r\n     * Копирует перечислимые свойства из объекта p в объект o и возвращает o.\r\n     * Если o и p имеют свойства с одинаковыми именами, значение свойства\r\n     * в объекте o остается неизменным.\r\n     * Эта функция не учитывает наличие методов доступа и не копирует атрибуты.\r\n     */\r\n    function merge(o, p) {\r\n        for (var prop in p) {\r\n            if (o.hasOwnProperty(prop)) continue;\r\n            o[prop] = p[prop];\r\n        }\r\n        return o;\r\n    }\r\n\r\n    /**\r\n     * Удаляет из объекта o свойства, отсутствующие в объекте p.\r\n     * Возвращает o. Объект o будет являться подмножеством множества \r\n     * объекта p.\r\n     */\r\n    function restrict(o, p) {\r\n        for(var prop in o){\r\n            if (!(prop in p)) delete o[prop];\r\n        }\r\n        return o;\r\n    }\r\n\r\n    /**\r\n     * Удаляет из объекта o свойства, присутствующие в объекте p.\r\n     * Возвращает o. Объект o будет представлять разность двух множеств.\r\n     */\r\n    function subtract(o, p) {\r\n        for(var prop in p){\r\n            delete o[prop];\r\n        }\r\n        return o;\r\n    }\r\n\r\n    /**\r\n     * Возвращает новый объект, содержащий свойства, присутствующие сразу в обоих\r\n     * объектах, o или p. Если оба объекта имеют свойства с одним и тем же именем,\r\n     * используется значение свойства из объекта p.\r\n     */\r\n    function union(o, p) {\r\n        return extend(extend({}, o), p);\r\n    }\r\n\r\n    /**\r\n     * Возвращает новый объект, содержащий свойства, присутствующие хотя бы в одном\r\n     * из объектов, o или p.\r\n     */\r\n    function intersection(o, p) {\r\n        return restrict(extend({}, o), p);\r\n    }\r\n\r\n    /**\r\n     * Возвращает массив имен собственных перечислимых свойств объекта o.\r\n     */\r\n    function keys(o) {\r\n        if (typeof o !== \"object\") throw TypeError();\r\n        var result = [];\r\n        for (var prop in o) {\r\n            if (o.hasOwnProperty(prop)) {\r\n                result.push(prop);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Добавляет в прототип объекта Object новый метод extend, который копирует все\r\n     * собственные перечислимые и неперечислимые свойства из объекта o в объект вызова.\r\n     */\r\n    Object.defineProperty(Object.prototype, \"extend\", {\r\n        writable: true,\r\n        enumerate: false,\r\n        configurable: true,\r\n        value: function (o) {\r\n            var names = Object.getOwnPropertyNames(o);\r\n            for (var i = 0; i < names.length; i++){\r\n                if (names[i] in this) continue;\r\n                var desc = Object.getOwnPropertyDescriptor(o.names[i]);\r\n                Object.defineProperty(this, names[i], desc);\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Monkey-Patching.\r\n     */\r\n    function trace(o,m){\r\n        alert(this);\r\n        var original = o[m];\r\n        o[m] = function(){\r\n            console.log(new Date(), \"Entering\", m);\r\n            console.log(this, arguments);\r\n            var result = original.apply(this, arguments);\r\n            //var result = original.apply(undefined, arguments);\r\n            console.log(new Date(), \"Exiting\", m);\r\n            return result;\r\n        };\r\n    }\r\n    function useTrace() {\r\n        var f = {x: function(a) {\r\n            alert(a);\r\n            alert(this);\r\n        }};\r\n        trace(f, \"x\");\r\n        var name = \"Denis\";\r\n        f.x(name);\r\n    }\r\n}\r\n\r\n\r\n"]}
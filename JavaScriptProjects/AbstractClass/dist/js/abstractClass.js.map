{"version":3,"sources":["../../js/abstractClass.js"],"names":["extend","o","p","prop","defineSubclass","superclass","constructor","methods","statics","prototype","Object","create","Function","abstractmethod","Error","AbstractSet","contains","NotSet","set","x","toString","equals","that","AbstractEnumerableSet","size","foreach","isEmpty","s","i","v","toLocaleString","toArray","a","push","SingletonSet","member","f","ctx","call","AbstractWritableSet","add","remove","union","self","intersection","difference","ArraySet","value","apply","arguments","indexOf","c","forEach","length","arg","splice"],"mappings":"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","file":"abstractClass.js","sourcesContent":["/**\r\n * Иерархия абстрактных и конкретных классов множеств.\r\n */\r\n//-------------------------------------------------------------------------------//\r\n\r\n/**\r\n * Копирует перечислимые свойства из объекта p в объект o и возвращает o.\r\n * Если o и p имеют свойства с одинаковыми именами, значение свойства\r\n * в объекте o затирается значением свойства из объекта p.\r\n * Эта функция не учитывает наличие методов доступа и не копирует атрибуты.\r\n */\r\nfunction extend(o, p) {\r\n    for (let prop in p) {\r\n        o[prop] = p[prop];\r\n    }\r\n    return o;\r\n}\r\n\r\n/**\r\n * Функция для создания простых подклассов.\r\n */\r\nfunction defineSubclass(superclass, constructor, methods, statics) {\r\n    constructor.prototype = Object.create(superclass.prototype);\r\n    constructor.prototype.constructor = constructor;\r\n    if (methods) extend(constructor.prototype, methods);\r\n    if (statics) extend(constructor, statics);\r\n    return constructor;\r\n}\r\n\r\n/**\r\n * Переопределенная функция extend для подклассов.\r\n */\r\nFunction.prototype.extend = function (constructor, methods, statics) {\r\n    return defineSubclass(this, constructor, methods, statics);\r\n};\r\n//-------------------------------------------------------------------------------//\r\n\r\n/**\r\n * Вспомогательная функция, которая может использоваться для определения\r\n * любого абстрактного метода.\r\n */\r\nfunction abstractmethod() {\r\n    throw new Error (\"абстрактный метод\");\r\n}\r\n\r\n/**\r\n * Класс AbstractSet определяет единственный абстрактный метод, contains().\r\n */\r\nfunction AbstractSet() {\r\n    throw new Error (\"Нельзя создать экземпляр абстрактного класса.\");\r\n}\r\nAbstractSet.prototype.contains = abstractmethod;\r\n\r\n/**\r\n * NetSet - конкретный подкласс класса AbstractSet.\r\n * Элементами этого множества являются все значения, который не являются\r\n * элементами некоторого другого множества. Поскольку это множество\r\n * определяется в терминах другого множества, оно не доступно для записи,\r\n * а так как оно имеет бесконечное число элементов, оно не доступно для перечисления.\r\n * Все, что позволяет этот класс, - это проверить принадлежность к множеству.\r\n */\r\nlet NotSet = AbstractSet.extend(\r\n    function NotSet(set) {\r\n        this.set = set;\r\n    },\r\n    {\r\n        contains: function (x) {\r\n            return !this.set.contains(x);\r\n        },\r\n        toString: function () {\r\n            return \"~\" + this.set.toString();\r\n        },\r\n        equals: function (that) {\r\n            return that instanceof NotSet && this.set.equals(that.set);\r\n        }\r\n    }\r\n);\r\n\r\n/**\r\n * AbstractEnumerableSet - абстрактный подкласс класса AbstractSet.\r\n * Определяет абстрактные методы size() и foreach() и реализует конкретные\r\n * методы isEmpty(), toArray(), to[Local]String() и equals().\r\n * Подклассы наследуемые этим абстрактным подклассом получат эти пять\r\n * методов даром.\r\n */\r\nlet AbstractEnumerableSet = AbstractSet.extend(\r\n    function () {\r\n        throw new Error (\"Нельзя создать экземпляр абстрактного класса.\");\r\n    },\r\n    {\r\n        size: abstractmethod,\r\n        foreach: abstractmethod,\r\n        isEmpty: function () {\r\n            return this.size() == 0;\r\n        },\r\n        toString: function () {\r\n            let s = \"{\", i = 0;\r\n            this.foreach(function (v) {\r\n                if (i++ > 0) s += \", \";\r\n                s += v;\r\n            });\r\n            return s + \"}\";\r\n        },\r\n        toLocaleString: function () {\r\n            let s = \"{\", i = 0;\r\n            this.foreach(function (v) {\r\n                if (i++ > 0) s += \", \";\r\n                if (v == null) {\r\n                    s += v;\r\n                }\r\n                else {\r\n                    s += v.toLocaleString();\r\n                }\r\n            });\r\n            return s + \"}\";\r\n        },\r\n        toArray: function () {\r\n            let a = [];\r\n            this.foreach(function (v) {\r\n                a.push(v);\r\n            });\r\n            return a;\r\n        },\r\n        equals: function (that) {\r\n            if (!(that instanceof AbstractEnumerableSet)) return false;\r\n            if (that.size() != that.size()) return false;\r\n            try {\r\n                this.foreach(function (v) {\r\n                    if (!that.contains(v)) throw false;\r\n                });\r\n                return true;\r\n            }\r\n            catch (x) {\r\n                if (x === false) return false;\r\n                throw x;\r\n            }\r\n        }\r\n    }\r\n);\r\n\r\n/**\r\n * SingletonSet - конкретный подкласс класса AbstractEnumerableSet.\r\n * Множество из единственного элемента, доступное только для чтения.\r\n */\r\nlet SingletonSet = AbstractEnumerableSet.extend(\r\n    function SingletonSet(member) {\r\n        this.member = member;\r\n    },\r\n    {\r\n        contains: function (x) {\r\n            return x === this.member;\r\n        },\r\n        size: function () {\r\n            return 1;\r\n        },\r\n        foreach: function (f, ctx) {\r\n            f.call(ctx, this.member);\r\n        }\r\n    }\r\n);\r\n\r\n/**\r\n * AbstractWritableSet - абстрактный подкласс класса AbstractEnumerableSet.\r\n * Определяет абстрактные методы add() и remove() и реализует конкретные\r\n * методы union(), intersection() и difference().\r\n */\r\nlet AbstractWritableSet = AbstractEnumerableSet.extend(\r\n    function () {\r\n        throw new Error (\"Нельзя создать экземпляр абстрактного класса.\");\r\n    },\r\n    {\r\n        add: abstractmethod,\r\n        remove: abstractmethod,\r\n        union: function (that) {\r\n            let self = this;\r\n            that.foreach(function (v) {\r\n                self.add(v);\r\n            });\r\n            return this;\r\n        },\r\n        intersection: function (that) {\r\n            let self = this;\r\n            this.foreach(function (v) {\r\n                if (!that.contains(v)) self.remove(v);\r\n            });\r\n            return this;\r\n        },\r\n        difference: function (that) {\r\n            let self = this;\r\n            that.foreach(function (v) {\r\n                self.remove(v);\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n);\r\n\r\n/**\r\n * ArraySet - конкретный подкласс класса AbstractWritableSet.\r\n * Представляет множество элементов как массив значений иреализует линейный\r\n * поиск в массиве в своем методе contains(). Поскольку агоритм метода contains()\r\n * имеет сложность О(n) вместо О(1), данный класс следует использовать только\r\n * для создания относительно небольших множеств.\r\n */\r\nlet ArraySet = AbstractWritableSet.extend(\r\n    function ArraySet() {\r\n        this.value = [];\r\n        this.add.apply(this, arguments);\r\n    },\r\n    {\r\n        contains: function (v) {\r\n            return this.value.indexOf(v) != -1;\r\n        },\r\n        foreach: function (f, c) {\r\n            return this.value.forEach(f, c);\r\n        },\r\n        size: function () {\r\n            return this.value.length;\r\n        },\r\n        add: function () {\r\n            for (let i = 0; i < arguments.length; i++){\r\n                let arg = arguments[i];\r\n                if (!this.contains(arg)) this.value.push(arg);\r\n            }\r\n            return this;\r\n        },\r\n        remove: function () {\r\n            for (let i = 0; i < arguments.length; i++){\r\n                let p = this.value.indexOf(arguments[i]);\r\n                if (p == -1) continue;\r\n                this.value.splice(p, 1);\r\n            }\r\n            return this;\r\n        }\r\n    }\r\n);\r\n"]}